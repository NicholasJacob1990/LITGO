#!/bin/bash

# Script de Verifica√ß√£o de Conformidade - LITGO5
# Este script verifica se o aplicativo est√° seguindo a documenta√ß√£o

echo "üîç LITGO5 - Verifica√ß√£o de Conformidade com a Documenta√ß√£o"
echo "=========================================================="
echo ""

# Cores para output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Contadores
PASSED=0
FAILED=0
WARNING=0

# Fun√ß√£o para verificar se arquivo existe
check_file() {
    if [ -f "$1" ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
        ((PASSED++))
    else
        echo -e "${RED}‚ùå $2${NC}"
        ((FAILED++))
    fi
}

# Fun√ß√£o para verificar se diret√≥rio existe
check_dir() {
    if [ -d "$1" ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
        ((PASSED++))
    else
        echo -e "${RED}‚ùå $2${NC}"
        ((FAILED++))
    fi
}

# Fun√ß√£o para verificar conte√∫do de arquivo
check_content() {
    if grep -q "$2" "$1" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ $3${NC}"
        ((PASSED++))
    else
        echo -e "${YELLOW}‚ö†Ô∏è $3${NC}"
        ((WARNING++))
    fi
}

echo "üìÅ 1. ESTRUTURA DO PROJETO"
echo "------------------------"
check_file "package.json" "Package.json existe"
check_file "app.config.ts" "Configura√ß√£o Expo"
check_file "tsconfig.json" "Configura√ß√£o TypeScript"
check_dir "app/(auth)" "Diret√≥rio de autentica√ß√£o"
check_dir "app/(tabs)" "Diret√≥rio de abas principais"
check_dir "lib" "Biblioteca de utilit√°rios"
check_dir "components" "Componentes reutiliz√°veis"
check_dir "supabase" "Configura√ß√£o Supabase"
echo ""

echo "üîê 2. AUTENTICA√á√ÉO E PERFIS"
echo "--------------------------"
check_file "app/(auth)/register-lawyer.tsx" "Cadastro de advogado"
check_file "app/(auth)/register-client.tsx" "Cadastro de cliente"
check_file "lib/contexts/AuthContext.tsx" "Contexto de autentica√ß√£o"
check_content "lib/contexts/AuthContext.tsx" "UserRole" "Tipos de usu√°rio definidos"
check_content "lib/supabase.ts" "createClient" "Cliente Supabase configurado"
echo ""

echo "üóÑÔ∏è 3. BANCO DE DADOS E MIGRA√á√ïES"
echo "-------------------------------"
check_file "supabase/config.toml" "Configura√ß√£o Supabase"
check_dir "supabase/migrations" "Diret√≥rio de migra√ß√µes"
MIGRATION_COUNT=$(ls supabase/migrations/*.sql 2>/dev/null | wc -l)
if [ "$MIGRATION_COUNT" -gt 0 ]; then
    echo -e "${GREEN}‚úÖ $MIGRATION_COUNT migra√ß√µes encontradas${NC}"
    ((PASSED++))
else
    echo -e "${RED}‚ùå Nenhuma migra√ß√£o encontrada${NC}"
    ((FAILED++))
fi

# Verificar migra√ß√µes cr√≠ticas
check_file "supabase/migrations/20250102000001_ensure_lawyers_table.sql" "Tabela lawyers"
check_file "supabase/migrations/20250103000000_create_cases_table.sql" "Tabela cases"
check_file "supabase/migrations/20250706000000_setup_cases_and_messages.sql" "Sistema de mensagens"
echo ""

echo "üíº 4. FUNCIONALIDADES PRINCIPAIS"
echo "-------------------------------"
check_file "cases/LawyerCasesScreen.tsx" "Tela de casos do advogado"
check_file "app/(tabs)/_internal/chat.tsx" "Sistema de chat"
check_file "app/triagem.tsx" "Sistema de triagem"
check_content "lib/supabase.ts" "get_user_cases" "Fun√ß√£o RPC para casos"
check_content "lib/supabase.ts" "LawyerService" "Servi√ßo de advogados"
echo ""

echo "üé® 5. INTERFACE E COMPONENTES"
echo "----------------------------"
check_content "lib/contexts/AuthContext.tsx" "UserRole" "Tipos de usu√°rio"
check_content "cases/LawyerCasesScreen.tsx" "LinearGradient" "Design system implementado"
check_content "app/(auth)/register-lawyer.tsx" "StepIndicator" "Onboarding multi-step"
check_file "lib/contexts/TasksContext.tsx" "Context de tarefas"
check_file "lib/contexts/CalendarContext.tsx" "Context de calend√°rio"
echo ""

echo "üì± 6. CONFIGURA√á√ïES E INTEGRA√á√ïES"
echo "--------------------------------"
check_file ".env.backup" "Arquivo de environment"
check_content ".env.backup" "SUPABASE_URL" "URL do Supabase configurada"
check_content ".env.backup" "GEMINI_API_KEY" "API do Gemini configurada"
check_file "CONFIGURACAO_OAUTH_GOOGLE_CALENDAR.md" "Documenta√ß√£o OAuth"
check_content "lib/openai.ts" "OpenAI" "Integra√ß√£o OpenAI presente"
echo ""

echo "üìö 7. DOCUMENTA√á√ÉO"
echo "-----------------"
check_file "DOCUMENTACAO_COMPLETA.md" "Documenta√ß√£o completa"
check_file "docs/archive/MIGRACAO_APLICADA.md" "Status das migra√ß√µes"
check_file "docs/archive/CORRECOES_FINAIS_APLICADAS.md" "Corre√ß√µes aplicadas"
check_file "VERIFICACAO_CONFORMIDADE.md" "Relat√≥rio de conformidade"
echo ""

echo "üß™ 8. TESTES E QUALIDADE"
echo "-----------------------"
check_file "jest.config.js" "Configura√ß√£o Jest"
check_file "jest-setup.js" "Setup de testes"
check_content "package.json" "\"test\":" "Script de teste configurado"
check_content "package.json" "\"lint\":" "Script de lint configurado"
echo ""

# Resumo final
echo "=================================================="
echo "üìä RESUMO DA VERIFICA√á√ÉO"
echo "=================================================="
echo -e "${GREEN}‚úÖ Aprovado: $PASSED${NC}"
echo -e "${YELLOW}‚ö†Ô∏è Avisos: $WARNING${NC}"
echo -e "${RED}‚ùå Falhas: $FAILED${NC}"
echo ""

TOTAL=$((PASSED + WARNING + FAILED))
CONFORMIDADE=$((PASSED * 100 / TOTAL))

if [ $CONFORMIDADE -ge 90 ]; then
    echo -e "${GREEN}üéâ CONFORMIDADE: ${CONFORMIDADE}% - EXCELENTE${NC}"
elif [ $CONFORMIDADE -ge 75 ]; then
    echo -e "${YELLOW}üëç CONFORMIDADE: ${CONFORMIDADE}% - BOM${NC}"
elif [ $CONFORMIDADE -ge 60 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è CONFORMIDADE: ${CONFORMIDADE}% - SATISFAT√ìRIO${NC}"
else
    echo -e "${RED}‚ùå CONFORMIDADE: ${CONFORMIDADE}% - NECESSITA MELHORIAS${NC}"
fi

echo ""
echo "üìã Para detalhes completos, consulte: VERIFICACAO_CONFORMIDADE.md"
echo ""

# Comandos sugeridos para pr√≥ximos passos
echo "üöÄ PR√ìXIMOS PASSOS SUGERIDOS:"
echo "1. npx supabase start     # Iniciar Supabase local"
echo "2. npm run dev           # Iniciar aplicativo"
echo "3. npm run test          # Executar testes"
echo "4. npm run lint          # Verificar qualidade do c√≥digo"